{"meta":{"title":"sun-moon-star-star","subtitle":"","description":"","author":"sun-moon-star-star","url":"https://sun-moon-star-star.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2021-02-10T03:10:00.754Z","updated":"2021-02-10T03:10:00.753Z","comments":false,"path":"/404.html","permalink":"https://sun-moon-star-star.github.io/404.html","excerpt":"","text":""},{"title":"Rongming-lu(鲁荣明)","date":"2021-02-10T07:24:10.928Z","updated":"2021-02-10T07:24:10.928Z","comments":false,"path":"about/index.html","permalink":"https://sun-moon-star-star.github.io/about/index.html","excerpt":"","text":"教育信息 2016.09-2020.06 湖南中医药大学 计算机科学与技术 本科综合测评1/59 湖南省优秀毕业生 ACM-ICPC银奖(2018·Beijing) 技能 数据结构与算法: Skiplist、B+tree、Sort、DP、String分布式一致性算法: 2pc、3pc、Raft、Paxos、Gossip中间件: Mysql、Redis、Kafka、Zookeeper服务治理: 限流熔断、认证鉴权、故障转移、负载均衡、分布式配置中心版本管理工具: Git 项目经历 基于Paxos协议的Key/Value存储系统 基于Golang语言并发和rpc调用来模拟多节点的Key/Value存储系统使用paxos协议实现日志同步，以保证统一的节点视图及数据副本间的一致性 流量录制和回放工具 录制线上真实请求流量进行回放测试，适合项目重构、回归测试回放的时候匹配Mock下游调用，解决维护测试环境成本高的问题"},{"title":"书单","date":"2021-02-10T03:10:00.861Z","updated":"2021-02-10T03:10:00.861Z","comments":false,"path":"books/index.html","permalink":"https://sun-moon-star-star.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-02-10T03:10:00.910Z","updated":"2021-02-10T03:10:00.910Z","comments":false,"path":"categories/index.html","permalink":"https://sun-moon-star-star.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-02-10T03:10:00.954Z","updated":"2021-02-10T03:10:00.953Z","comments":true,"path":"links/index.html","permalink":"https://sun-moon-star-star.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-02-10T03:10:01.043Z","updated":"2021-02-10T03:10:01.043Z","comments":false,"path":"repository/index.html","permalink":"https://sun-moon-star-star.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-02-10T03:10:01.002Z","updated":"2021-02-10T03:10:01.002Z","comments":false,"path":"tags/index.html","permalink":"https://sun-moon-star-star.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"tips","slug":"tips","date":"2021-02-11T08:32:24.000Z","updated":"2021-02-10T08:35:51.993Z","comments":true,"path":"2021/02/11/tips/","link":"","permalink":"https://sun-moon-star-star.github.io/2021/02/11/tips/","excerpt":"","text":"backend压缩 减少javascript,css,html内容本身的大小: 删除多余的空格、注释、tab等 压缩: 压缩的开销远小于传输的开销，带宽比较贵","categories":[],"tags":[]},{"title":"流量录制和回放","slug":"liuliangluzhihehuifang","date":"2021-02-10T07:35:34.000Z","updated":"2021-02-11T11:49:33.816Z","comments":true,"path":"2021/02/10/liuliangluzhihehuifang/","link":"","permalink":"https://sun-moon-star-star.github.io/2021/02/10/liuliangluzhihehuifang/","excerpt":"","text":"功能将线上的真实请求流量录制下来，包含调用下游服务的流量。 拦截点选择流量录制必然要在某个点上对流量进行拦截并镜像，常见的拦截方式如下： 业务代码 rpc框架 语言标准库 libc syscall tcp/ip协议栈 网卡驱动 分析: 为了做到尽量无业务浸入、具体框架无关，业务代码和rpc框架拦截方式不适合。 syscal拦截成本高，到tcp/ip协议栈的时候线程等信息丢失更不容易区分，所以后面几种方式都不适合。 综上，比较适合拦截的方式是libc、语言标准库。 对于底层使用libc的语言，如php，可以在libc进行拦截。 对于没有使用libc的语言，如golang，可以在语言标准库上修改做拦截。 链路追踪流量录制不仅要录制接口inbound请求流量，还要录制下游outbound请求流量，那如何将inbound请求和outbound请求关联起来呢？ 利用分布式追踪原理，用唯一的traceID将请求关联起来。 对于http服务，每个请求会单独开一个goroutine处理，对于大部分的场景都是在一个goroutine完成。可以使用goroutineID来关联inbound和outbound请求，对于大部分场景都适用。 对于少数并发等不在一个goroutine处理的请求，就需要传同一个id来标识，需要少量业务代码改动。 流量存储 方便ES检索 二进制安全，数据不丢失 流量回放流量回放的前提是基于录制的流量进行操作。 如果录制的流量只有Inbound请求，没有Outbound请求，那么，回放过程非常简单。只需构造http请求发给SUT，等待SUT返回Response后进行对比即可。 但实际业务中，不仅会有Outbound请求，而且Outbound请求还很多，协议也各种各样。 因此，流量回放首要解决的问题有： 如何拦截SUT的Outbound请求，将其转发给Agent的Mock Server。 如何在录制的流量里，选择最合适的Outbound返回给SUT。 @https://github.com/didi/sharingan/wiki","categories":[],"tags":[]},{"title":"墨子·修身","slug":"mozi-xiushen","date":"2021-02-10T03:51:20.000Z","updated":"2021-02-11T11:49:42.356Z","comments":true,"path":"2021/02/10/mozi-xiushen/","link":"","permalink":"https://sun-moon-star-star.github.io/2021/02/10/mozi-xiushen/","excerpt":"","text":"墨子·修身 君子战虽有陈，而勇为本焉。丧虽有礼，而哀为本焉。士虽有学，而行为本焉。是故置本不安者，无务丰末。近者不亲，无务来远。亲戚不附，无务外交。事无终始，无务多业。举物而暗，无务博闻。 君子作战虽用阵势，但必以勇敢为本；办丧事虽讲礼仪，但必以哀痛为本；做官虽讲才识，但必以德行为本。所以立本不牢的，就不必讲究枝节的繁盛；身边的人不能亲近，就不必讲究招徕远方之民；亲戚不能使之归附，就不必讲究结纳外人；做一件事情有始无终，就不必谈起从事多种事业；举一件事物尚且弄不明白，就不必追求广见博闻。 是故先王之治天下也，必察迩来远，君子察迩而迩修者也。见不修行，见毁，而反之身者也，此以怨省而行修矣。谮慝之言，无入之耳，批捍之声，无出之口，杀伤人之孩，无存之心，虽有诋讦之民，无所依矣。 所以先王治理天下，必定要明察左右而招徕远人。君子能明察左右，左右之人也就能修养自己的品行了。君子不能修养自己的品行而受人诋毁，那就应当自我反省，因而怨少而品德日修。谗害诽谤之言不入于耳，攻击他人之语不出于口，伤害人的念头不存于心，这样，即使遇有好诋毁、攻击的人，也就无从施展了。 故君子力事日强，愿欲日逾，设壮日盛。君子之道也，贫则见廉，富则见义，生则见爱，死则见哀。四行者不可虚假，反之身者也。藏于心者，无以竭爱。动于身者，无以竭恭。出于口者，无以竭驯。畅之四支，接之肌肤，华发隳颠，而犹弗舍者，其唯圣人乎！ 所以君子本身的力量一天比一天加强，志向一无比一天远大，庄敬的品行一天比一天完善。君子之道（应包括如下方面）：贫穷时表现出廉洁，富足时表现出恩义，对生者表示出慈爱，对死者表示出哀痛。这四种品行不是可以装出来的，而是必须自身具备的。凡是存在于内心的，是无穷的慈爱；举止于身体的，是无比的谦恭；谈说于嘴上的，是无比的雅驯。（让上述四种品行）畅达于四肢和肌肤，直到白发秃顶之时仍不肯舍弃，大概只有圣人吧！ 志不强者智不达，言不信者行不果。据财不能以分人者，不足与友。守道不笃，偏物不博，辩是非不察者，不足与游。本不固者末必几，雄而不修者，其后必惰，原浊者流不清，行不信者名必秏。名不徒生而誉不自长，功成名遂，名誉不可虚假，反之身者也。务言而缓行，虽辩必不听。多力而伐功，虽劳必不图。慧者心辩而不繁说，多力而不伐功，此以名誉扬天下。言无务为多而务为智，无务为文而务为察。故彼智无察，在身而情，反其路者也。善无主于心者不留，行莫辩于身者不立。名不可简而成也，誉不可巧而立也，君子以身戴行者也。思利寻焉，忘名忽焉，可以为士于天下者，未尝有也。 意志不坚强的，智慧一定不高；说话不讲信用的，行动一定不果敢；拥有财富而不肯分给人的，不值得和他交友；守道不坚定，阅历事物不广博，辨别是非不清楚的，不值得和他交游。根本不牢的，枝节必危。光勇敢而不注重品行修养的，后必懒惰。源头浊的流不清，行为无信的人名声必受损害，声誉不会无故产生和自己增长。功成了必然名就，名誉不可虚假，必须反求诸己。专说而行动迟缓，虽然会说，但没人听信。出力多而自夸功劳，虽劳苦而不可取。聪明人心里明白而不多说，努力作事而不夸说自己的功劳，因此名誉扬于天下。说话不图繁多而讲究富有智慧，不图文采而讲究明白。所以既无智慧又不能审察，加上自身又懒惰，则必背离正道而行了。善不从本心生出就不能保留，行不由本身审辨就不能树立，名望不会由茍简而成，声誉不会因诈伪而立，君子是言行合一的。以图利为重，忽视立名，（这样）而可以成为天下贤士的人，还不曾有过。 @https://ctext.org/mozi/self-cultivation/zhs","categories":[],"tags":[]}],"categories":[],"tags":[]}