<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sun-moon-star-star</title>
  
  
  <link href="https://sun-moon-star-star.github.io/atom.xml" rel="self"/>
  
  <link href="https://sun-moon-star-star.github.io/"/>
  <updated>2021-02-19T09:18:43.364Z</updated>
  <id>https://sun-moon-star-star.github.io/</id>
  
  <author>
    <name>sun-moon-star-star</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Direct Io</title>
    <link href="https://sun-moon-star-star.github.io/2021/02/19/directio/"/>
    <id>https://sun-moon-star-star.github.io/2021/02/19/directio/</id>
    <published>2021-02-19T09:13:33.000Z</published>
    <updated>2021-02-19T09:18:43.364Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Direct-Io"><a href="#Direct-Io" class="headerlink" title="Direct Io"></a>Direct Io</h4><p>@<a href="https://yarchive.net/comp/linux/o_direct.html">https://yarchive.net/comp/linux/o_direct.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Direct-Io&quot;&gt;&lt;a href=&quot;#Direct-Io&quot; class=&quot;headerlink&quot; title=&quot;Direct Io&quot;&gt;&lt;/a&gt;Direct Io&lt;/h4&gt;&lt;p&gt;@&lt;a href=&quot;https://yarchive.net/comp/linux/</summary>
      
    
    
    
    
    <category term="io" scheme="https://sun-moon-star-star.github.io/tags/io/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sun-moon-star-star.github.io/2021/02/19/questions/"/>
    <id>https://sun-moon-star-star.github.io/2021/02/19/questions/</id>
    <published>2021-02-19T09:10:30.306Z</published>
    <updated>2021-02-19T09:10:47.758Z</updated>
    
    <content type="html"><![CDATA[<p>在文件系统中，也有类似的缓存。如果不想使用任何缓存，应该怎么做？如果调用mmap，使用了多少缓存？如果调用系统调用open + read，使用了多少缓存？如果调用fopen + fread，又使用了多少缓存？</p><p>管理节点通过udp心跳的方式感知数据节点是否可用，而计算节点通过tcp长链接的方式和数据节点交互。二者看到的状态是否存在不一致？如果是，你会如何解决？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在文件系统中，也有类似的缓存。如果不想使用任何缓存，应该怎么做？如果调用mmap，使用了多少缓存？如果调用系统调用open + read，使用了多少缓存？如果调用fopen + fread，又使用了多少缓存？&lt;/p&gt;
&lt;p&gt;管理节点通过udp心跳的方式感知数据节点是否可用，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HTTP 协议</title>
    <link href="https://sun-moon-star-star.github.io/2021/02/19/http/"/>
    <id>https://sun-moon-star-star.github.io/2021/02/19/http/</id>
    <published>2021-02-19T01:56:54.000Z</published>
    <updated>2021-02-19T02:14:16.861Z</updated>
    
    <content type="html"><![CDATA[<h4 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h4><h5 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h5><p>HTTP 是 HyperText Transfer Protocol（超文本传输协议）的缩写，它是互联网上应用最为广泛的一种网络协议，所有 WWW 文件都必须遵守这个标准。</p><p>伴随着计算机网络和浏览器的诞生，HTTP 1.0/1.1 也随之而来，它建立在 TCP 协议之上，处于计算机网络中的应用层，所以 HTTP 协议的瓶颈及其优化技巧都是基于 TCP 协议本身的特性，例如 TCP 建立连接的 3 次握手和断开连接的 4 次挥手，以及每次建立连接带来的 RTT 延迟时间等。</p><p>HTTP 1.0 与 1.1 的主要区别在于长连接支持、多路复用、带宽节约与数据压缩等，相对于 HTTP/2，本文将其通称为 HTTP/1。</p><h5 id="HTTP-1-的缺陷"><a href="#HTTP-1-的缺陷" class="headerlink" title="HTTP/1 的缺陷"></a>HTTP/1 的缺陷</h5><p><strong><em>连接无法复用</em></strong>：连接无法复用会导致每次请求都经历三次握手和慢启动。三次握手在高延迟的场景下影响较明显，慢启动则对大量小文件请求影响较大（没有达到最大窗口请求就被终止）。</p><p>HTTP/1.0 传输数据时，每次都需要重新建立连接，增加延迟。</p><p>HTTP/1.1 虽然加入 keep-alive 可以复用一部分连接，但域名分片等情况下仍然需要建立多个 connection，耗费资源，给服务器带来性能压力。</p><p><strong><em>Head-Of-Line Blocking（HOLB，队头阻塞）</em></strong>：这会导致带宽无法被充分利用，以及后续健康请求被阻塞。HOLB 是指一系列包（package）因为第一个包被阻塞；当页面中需要请求很多资源的时候，HOLB 会导致在达到最大请求数量时，剩余的资源需要等待其它资源请求完成后才能发起请求。</p><p>HTTP 1.0：下个请求必须在前一个请求返回后才能发出，request-response对按序发生。显然，如果某个请求长时间没有返回，那么接下来的请求就全部阻塞了。</p><p>HTTP 1.1：尝试使用 pipeling 来解决，即浏览器可以一次性发出多个请求（同个域名、同一条 TCP 链接）。但 pipeling 要求返回是按序的，那么前一个请求如果很耗时（比如处理大图片），那么后面的请求即使服务器已经处理完，仍会等待前面的请求处理完才开始按序返回。所以，pipeling 只部分解决了 HOLB。</p><p><strong><em>协议开销大</em></strong>： HTTP/1 在使用时，header 里携带的内容过大，在一定程度上增加了传输的成本，并且每次请求 header 基本不怎么变化，尤其在移动端增加用户流量。</p><p><strong><em>安全因素</em></strong>：HTTP/1 在传输数据时，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份，这在一定程度上无法保证数据的安全性。</p><h4 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP/2"></a>HTTP/2</h4><p>2015 年，继承于 SPDY 的 HTTP/2 协议发布了。HTTP/2 是 HTTP/1 的替代品，但它不是重写，协议中还保留着第一代的一些内容，比如 HTTP 方法、状态码与语义等都与 HTTP/1 一样。</p><p>HTTP/2 基于SPDY3，专注于性能，最大的一个目标是在用户和网站间只用一个连接。</p><p>HTTP/2 由两个规范组成：</p><p>Hypertext Transfer Protocol version 2 - RFC7540</p><p>HPACK - Header Compression for HTTP/2 - RFC7541</p><p><strong><em>HTTP/2 特性二进制传输</em></strong>: </p><p>HTTP/2 采用二进制格式传输数据，而非 HTTP/1 的文本格式，二进制协议解析起来更高效。</p><p>HTTP/1 的请求和响应报文，都是由起始行、首部和实体正文（可选）组成，各部分之间以文本换行符分隔。HTTP/2 将请求和响应数据分割为更小的帧，并且它们采用二进制编码。</p><p>接下来我们介绍几个重要的概念：</p><p><strong><em>流（stream）</em></strong>：流是连接中的一个虚拟信道，可以承载双向的消息；每个流都有一个唯一的整数标识符（1、2…N）</p><p><strong><em>消息（message）</em></strong>：指逻辑上的 HTTP 消息，比如请求、响应等，由一或多个帧组成</p><p><strong><em>帧（frame）</em></strong>：HTTP/2 通信的最小单位，每个帧包含帧首部，至少也会标识出当前帧所属的流，承载着特定类型的数据，如 HTTP 首部、负荷等</p><p>HTTP/2 中，同域名下所有通信都在单个连接上完成，该连接可以承载任意数量的双向数据流。每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。多个帧之间可以乱序发送，根据帧首部的流标识可以重新组装。</p><h5 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h5><p>在 HTTP/2 中引入了多路复用技术。多路复用很好地解决了浏览器限制同一个域名下的请求数量的问题，同时也更容易实现全速传输，毕竟新开一个 TCP 连接都需要慢慢提升传输速度。</p><p>在 HTTP/2 中，有了二进制分帧之后，HTTP/2 不再依赖 TCP 链接去实现多流并行了，像前边提到的，在 HTTP/2 中。</p><ul><li><p>同域名下所有通信都在单个连接上完成。</p></li><li><p>单个连接可以承载任意数量的双向数据流。</p></li><li><p>数据流以消息的形式发送，而消息又由一个或多个帧组成，多个帧之间可以乱序发送，因为根据帧首部的流标识可以重新组装。</p></li></ul><p>这一特性，使性能有了极大提升：</p><p>同个域名只需要占用一个 TCP 连接，使用一个连接并行发送多个请求和响应，消除了因多个 TCP 连接而带来的延时和内存消耗</p><p>并行交错地发送多个请求，请求之间互不影响</p><p>并行交错地发送多个响应，响应之间互不干扰</p><p>在 HTTP/2 中，每个请求都可以带一个 31 bit 的优先值，数值越大优先级越低，0 表示最高优先级。有了这个优先值，客户端和服务器就可以在处理不同流时采取不同的策略，以最优的方式发送流、消息和帧。</p><h5 id="Header-压缩"><a href="#Header-压缩" class="headerlink" title="Header 压缩"></a>Header 压缩</h5><p>在 HTTP/1 中，我们使用文本的形式传输 header，在 header 携带 cookie 的情况下，可能每次都需要重复传输几百到几千字节。</p><p>为了减少这块的资源消耗并提升性能， HTTP/2 对这些首部采取了压缩策略：</p><p>HTTP/2 在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键－值对，对于相同的数据，不再通过每次请求和响应发送</p><p>首部表在 HTTP/2 的连接存续期内始终存在，由客户端和服务器共同渐进地更新</p><p>每个新的首部键-值对要么被追加到当前表的末尾，要么替换表中之前的值</p><p>例如两个请求， 请求 1 发送了所有头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销。</p><h5 id="Server-Push"><a href="#Server-Push" class="headerlink" title="Server Push"></a>Server Push</h5><p>Server Push 即服务端能通过 push 的方式将客户端需要的内容预先推送过去，也叫“cache push”。</p><p>可以想象以下情况：某些资源客户端是一定会请求的，这时就可以采取服务端 push 的技术，提前给客户端推送必要的资源，这样就可以相对减少一点延迟时间。当然在浏览器兼容的情况下你也可以使用 prefetch。</p><p>例如服务端可以主动把 JS 和 CSS 文件推送给客户端，而不需要客户端解析 HTML 时再发送这些请求。</p><p>服务端可以主动推送，客户端也有权利选择是否接收。如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过发送 RST_STREAM 帧来拒收。主动推送也遵守同源策略，换句话说，服务器不能随便将第三方资源推送给客户端，而必须是经过双方确认才行。</p><h4 id="HTTP-3"><a href="#HTTP-3" class="headerlink" title="HTTP/3"></a>HTTP/3</h4><p>虽然 HTTP/2 解决了很多之前旧版本的问题，但是它还是存在一个巨大的问题，主要是底层支撑的 TCP 协议造成的。</p><p>上文提到 HTTP/2 使用了多路复用，一般来说同一域名下只需要使用一个 TCP 连接。但当这个连接中出现了丢包的情况，那就会导致 HTTP/2 的表现情况反倒不如 HTTP/1 了。</p><p>因为在出现丢包的情况下，整个 TCP 都要开始等待重传，也就导致了后面的所有数据都被阻塞了。但是对于 <strong><em>HTTP/1.1 来说，可以开启多个 TCP 连接，出现这种情况反到只会影响其中一个连接，剩余的 TCP 连接还可以正常传输数据</em></strong>。</p><p>那么可能就会有人考虑到去修改 TCP 协议，其实这已经是一件不可能完成的任务了，因为 TCP 存在的时间实在太长，已经充斥在各种设备中，并且这个协议是由操作系统实现的，更新起来不大现实。</p><p>基于这个原因，Google 就自己架起炉灶搞了一个基于 UDP 协议的 QUIC 协议，并且使用在了 HTTP/3 上，HTTP/3 之前名为 HTTP-over-QUIC，从这个名字中我们也可以发现，HTTP/3 最大的改造就是使用了 QUIC。</p><p>QUIC 虽然基于 UDP，但是在原本的基础上新增了很多功能，接下来我们重点介绍几个 QUIC 功能。</p><h4 id="QUIC-功能"><a href="#QUIC-功能" class="headerlink" title="QUIC 功能"></a>QUIC 功能</h4><h5 id="0RTT"><a href="#0RTT" class="headerlink" title="0RTT"></a>0RTT</h5><p>通过使用类似 TCP 快速打开的技术，缓存当前会话的上下文，在下次恢复会话的时候，只需要将之前的缓存传递给服务端验证通过就可以进行传输了。0RTT 建连可以说是 QUIC 相比 HTTP/2 最大的性能优势。那什么是 0RTT 建连呢？</p><p>这里面有两层含义:</p><p>1、传输层 0RTT 就能建立连接。</p><p>2、加密层 0RTT 就能建立加密连接。</p><p>因为这里考虑到安全性，我们就拿加了 LTS 的“安全的 HTTP 协议”HTTPS 来对比。HTTPS 的一次完全握手的建连过程，需要 3 个 RTT，就算是会话复用也需要至少 2 个 RTT。</p><p>而 QUIC 呢？由于建立在 UDP 的基础上，同时又实现了 0RTT 的安全握手，所以在大部分情况下，只需要 0 个 RTT 就能实现数据发送，在实现前向加密的基础上，并且 0RTT 的成功率相比 TLS 的会话记录单要高很多。</p><h5 id="多路复用-1"><a href="#多路复用-1" class="headerlink" title="多路复用"></a>多路复用</h5><p>QUIC 原生实现了多路复用功能，并且传输的单个数据流可以保证有序交付且不会影响其它数据流，这样的技术就解决了前边提到的 TCP 多路复用存在的问题。</p><p>同 HTTP/2 一样，同一个 QUIC 连接上可以创建多个 stream 来发送多个 HTTP 请求，但是，QUIC 是基于 UDP 的，因为一个连接上的多个 stream 之间没有依赖，所以不存在 HTTP/2 中的问题。比如下图中 stream2 丢了一个 UDP 包，不会影响后面跟着 Stream3 和 Stream4，不存在 TCP 队头阻塞。虽然 stream2 的那个包需要重新传，但是 stream3、stream4 的包无需等待就可以发给用户。</p><p>另外 QUIC 在移动端的表现也会比 TCP 好。因为 TCP 是基于 IP 和端口去识别连接的，这种方式在多变的移动端网络环境下是很脆弱的。而 QUIC 是通过 ID 的方式去识别一个连接，不管你网络环境如何变化，只要 ID 不变，就能迅速重连上。</p><h5 id="加密认证的报文"><a href="#加密认证的报文" class="headerlink" title="加密认证的报文"></a>加密认证的报文</h5><p>TCP 协议头部没有经过任何加密和认证，所以在传输过程中很容易被中间网络设备篡改、注入和窃听，比如修改序列号与滑动窗口。这些行为有可能是出于性能优化，也有可能是主动攻击。</p><p>相比之下，QUIC 的 packet 可以说是武装到了牙齿。除了个别报文比如 PUBLIC_RESET 和 CHLO，所有报文头部都是经过认证的，报文 Body 都是经过加密的。</p><p>这样只要是针对 QUIC 报文进行了任何修改，接收端都能够及时发现，有效地降低了安全风险。</p><p>Stream Frame 的报文头部，有认证；报文内容，全部经过加密。</p><h5 id="前向纠错机制"><a href="#前向纠错机制" class="headerlink" title="前向纠错机制"></a>前向纠错机制</h5><p>QUIC 协议有一个非常独特的特性，称为前向纠错（Forward Error Correction，FEC），每个数据包除了它本身的内容之外，还包括了部分其它数据包的数据，因此少量的丢包可以通过其它包的冗余数据直接组装而无需重传。</p><p>前向纠错牺牲了每个数据包可以发送数据的上限，但是减少了因为丢包导致的数据重传次数。这会取得更好的效果，因为数据重传将会消耗更多的时间，包括确认数据包丢失、请求重传与等待新数据包等步骤。</p><p>假如说这次我要发送三个包，那么协议会算出这三个包的异或值并单独发出一个校验包，也就是总共发出了四个包，当出现其中的非校验包丢包的情况时，可以通过另外三个包计算出丢失的数据包的内容。当然这种技术只能使用在丢失一个包的情况下，如果出现丢失多个包就不能使用纠错机制了，只能使用重传的方式了。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>HTTP/1 有连接无法复用、队头阻塞、协议开销大和安全因素等多个缺陷</p><p>HTTP/2 通过多路复用、二进制流与 Header 压缩等技术，极大地提高了性能，但是还是存在一些问题</p><p>HTTP/3 抛弃 TCP 协议，以全新的视角重新设计 HTTP。其底层支撑是 QUIC 协议，该协议基于 UDP，有 UDP 特有的优势，同时它又取了 TCP 中的精华，实现了即快又可靠的协议</p><p>从 HTTP/1 到 HTTP/3，HTTP 协议经过不断进化，性能越来越高，在这个过程中，底层协议甚至从 TCP 改为了之前被认定为不适合 UDP，这其中不断探索的设计思想值得学习。虽然本文是简单的介绍，但已经把这一演进过程简单地总结了出来，希望读者能够有所收获。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;HTTP&quot;&gt;&lt;a href=&quot;#HTTP&quot; class=&quot;headerlink&quot; title=&quot;HTTP&quot;&gt;&lt;/a&gt;HTTP&lt;/h4&gt;&lt;h5 id=&quot;HTTP-协议&quot;&gt;&lt;a href=&quot;#HTTP-协议&quot; class=&quot;headerlink&quot; title=&quot;HTT</summary>
      
    
    
    
    
    <category term="http net protocol" scheme="https://sun-moon-star-star.github.io/tags/http-net-protocol/"/>
    
  </entry>
  
  <entry>
    <title>&lt;&lt;天龙八部&gt;&gt; 章回名</title>
    <link href="https://sun-moon-star-star.github.io/2021/02/19/tianlongbabuzhanghuiming/"/>
    <id>https://sun-moon-star-star.github.io/2021/02/19/tianlongbabuzhanghuiming/</id>
    <published>2021-02-19T01:56:54.000Z</published>
    <updated>2021-02-19T02:42:06.384Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一部《少年游》"><a href="#第一部《少年游》" class="headerlink" title="第一部《少年游》"></a>第一部《少年游》</h4><p>青衫磊落险峰行，玉壁月华明。马疾香幽，崖高人远，微步毂纹生。<br>谁家子弟谁家院，无计悔多情。虎啸龙吟，换巢鸾凤，剑气碧烟横。</p><h4 id="第二部《苏幕遮》"><a href="#第二部《苏幕遮》" class="headerlink" title="第二部《苏幕遮》"></a>第二部《苏幕遮》</h4><p>向来痴，从此醉，水榭听香，指点群豪戏。剧饮千杯男儿事，杏子林中，商略平生义。<br>昔时因，今日意，胡汉恩仇，须倾英雄泪。虽万千人吾往矣，悄立雁门，绝壁无余字。</p><h4 id="第三部《破阵子》"><a href="#第三部《破阵子》" class="headerlink" title="第三部《破阵子》"></a>第三部《破阵子》</h4><p>千里茫茫若梦，双眸粲粲如星。塞上牛羊空许约，烛畔鬓云有旧盟。莽苍踏雪行。<br>赤手屠熊搏虎，金戈荡寇鏖兵。草木残生颅铸铁，虫豸凝寒掌作冰。挥洒缚豪英。</p><h4 id="第四部《洞仙歌》"><a href="#第四部《洞仙歌》" class="headerlink" title="第四部《洞仙歌》"></a>第四部《洞仙歌》</h4><p>输赢成败，又争由人算！且自逍遥没谁管。奈天昏地暗，斗转星移。风骤紧，缥缈峰头云乱。<br>红颜弹指老，刹那芳华。梦里真真语真幻。同一笑，到头万事俱空。糊涂醉，情长计短。解不了，名缰系嗔贪。却试问，几时把痴心断？</p><h4 id="第五部《水龙吟》"><a href="#第五部《水龙吟》" class="headerlink" title="第五部《水龙吟》"></a>第五部《水龙吟》</h4><p>燕云十八飞骑，奔腾如虎风烟举。老魔小丑，岂堪一击，胜之不武。王霸雄图，血海深恨，尽归尘土。念枉求美眷，良缘安在？枯井底，污泥处。<br>酒罢问君三语，为谁开，茶花满路？王孙落魄，怎生消得，杨枝玉露？敝屣荣华，浮云生死，此身何惧！教单于折箭，六军辟易，奋英雄怒！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;第一部《少年游》&quot;&gt;&lt;a href=&quot;#第一部《少年游》&quot; class=&quot;headerlink&quot; title=&quot;第一部《少年游》&quot;&gt;&lt;/a&gt;第一部《少年游》&lt;/h4&gt;&lt;p&gt;青衫磊落险峰行，玉壁月华明。马疾香幽，崖高人远，微步毂纹生。&lt;br&gt;谁家子弟谁家院，无计悔多</summary>
      
    
    
    
    
    <category term="zhao" scheme="https://sun-moon-star-star.github.io/tags/zhao/"/>
    
  </entry>
  
  <entry>
    <title>tips</title>
    <link href="https://sun-moon-star-star.github.io/2021/02/11/tips/"/>
    <id>https://sun-moon-star-star.github.io/2021/02/11/tips/</id>
    <published>2021-02-11T08:32:24.000Z</published>
    <updated>2021-02-12T14:49:26.299Z</updated>
    
    <content type="html"><![CDATA[<h4 id="backend"><a href="#backend" class="headerlink" title="backend"></a>backend</h4><h5 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h5><ul><li>减少javascript,css,html内容本身的大小: 删除多余的空格、注释、tab等</li><li>压缩: 压缩的开销远小于传输的开销，带宽比较贵</li></ul><h5 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h5><ul><li>不要过于抽象以至于代码难以阅读</li></ul><h5 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h5><ul><li>时间开销大</li><li>难以阅读， 难度大</li><li>适合原子的功能，不适合做过于复杂的判断</li></ul><h5 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h5><ul><li>细分的时候要注意体系和理解性</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;backend&quot;&gt;&lt;a href=&quot;#backend&quot; class=&quot;headerlink&quot; title=&quot;backend&quot;&gt;&lt;/a&gt;backend&lt;/h4&gt;&lt;h5 id=&quot;压缩&quot;&gt;&lt;a href=&quot;#压缩&quot; class=&quot;headerlink&quot; title=&quot;压</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>流量录制和回放</title>
    <link href="https://sun-moon-star-star.github.io/2021/02/10/liuliangluzhihehuifang/"/>
    <id>https://sun-moon-star-star.github.io/2021/02/10/liuliangluzhihehuifang/</id>
    <published>2021-02-10T07:35:34.000Z</published>
    <updated>2021-02-19T01:57:24.010Z</updated>
    
    <content type="html"><![CDATA[<h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>将线上的真实请求流量录制下来，包含调用下游服务的流量。</p><h4 id="拦截点选择"><a href="#拦截点选择" class="headerlink" title="拦截点选择"></a>拦截点选择</h4><p>流量录制必然要在某个点上对流量进行拦截并镜像，常见的拦截方式如下：</p><ul><li>业务代码</li><li>rpc框架</li><li>语言标准库</li><li>libc</li><li>syscall</li><li>tcp/ip协议栈</li><li>网卡驱动</li></ul><p>分析:</p><ul><li>为了做到尽量无业务浸入、具体框架无关，业务代码和rpc框架拦截方式不适合。</li><li>syscal拦截成本高，到tcp/ip协议栈的时候线程等信息丢失更不容易区分，所以后面几种方式都不适合。</li></ul><p>综上，比较适合拦截的方式是libc、语言标准库。</p><ul><li>对于底层使用libc的语言，如php，可以在libc进行拦截。</li><li>对于没有使用libc的语言，如golang，可以在语言标准库上修改做拦截。</li></ul><h4 id="链路追踪"><a href="#链路追踪" class="headerlink" title="链路追踪"></a>链路追踪</h4><p>流量录制不仅要录制接口inbound请求流量，还要录制下游outbound请求流量，那如何将inbound请求和outbound请求关联起来呢？</p><blockquote><p>利用分布式追踪原理，用唯一的traceID将请求关联起来。</p></blockquote><p>对于http服务，每个请求会单独开一个goroutine处理，对于大部分的场景都是在一个goroutine完成。可以使用goroutineID来关联inbound和outbound请求，对于大部分场景都适用。</p><p>对于少数并发等不在一个goroutine处理的请求，就需要传同一个id来标识，需要少量业务代码改动。</p><h4 id="流量存储"><a href="#流量存储" class="headerlink" title="流量存储"></a>流量存储</h4><ul><li><p>方便ES检索</p></li><li><p>二进制安全，数据不丢失</p></li></ul><h4 id="流量回放"><a href="#流量回放" class="headerlink" title="流量回放"></a>流量回放</h4><p>流量回放的前提是基于录制的流量进行操作。</p><p>如果录制的流量只有Inbound请求，没有Outbound请求，那么，回放过程非常简单。只需构造http请求发给SUT，等待SUT返回Response后进行对比即可。</p><p>但实际业务中，不仅会有Outbound请求，而且Outbound请求还很多，协议也各种各样。</p><p>因此，流量回放首要解决的问题有：</p><ol><li>如何拦截SUT的Outbound请求，将其转发给Agent的Mock Server。</li><li>如何在录制的流量里，选择最合适的Outbound返回给SUT。</li></ol><p>@<a href="https://github.com/didi/sharingan/wiki">https://github.com/didi/sharingan/wiki</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h4&gt;&lt;p&gt;将线上的真实请求流量录制下来，包含调用下游服务的流量。&lt;/p&gt;
&lt;h4 id=&quot;拦截点选择&quot;&gt;&lt;a href=&quot;#拦截点选择&quot; class=</summary>
      
    
    
    
    
    <category term="replay test refactor" scheme="https://sun-moon-star-star.github.io/tags/replay-test-refactor/"/>
    
  </entry>
  
  <entry>
    <title>墨子·修身</title>
    <link href="https://sun-moon-star-star.github.io/2021/02/10/mozi-xiushen/"/>
    <id>https://sun-moon-star-star.github.io/2021/02/10/mozi-xiushen/</id>
    <published>2021-02-10T03:51:20.000Z</published>
    <updated>2021-02-19T02:39:39.175Z</updated>
    
    <content type="html"><![CDATA[<h4 id="墨子·修身"><a href="#墨子·修身" class="headerlink" title="墨子·修身"></a>墨子·修身</h4><ul><li><p>君子战虽有陈，而勇为本焉。丧虽有礼，而哀为本焉。士虽有学，而行为本焉。是故置本不安者，无务丰末。近者不亲，无务来远。亲戚不附，无务外交。事无终始，无务多业。举物而暗，无务博闻。</p><blockquote><p>君子作战虽用阵势，但必以勇敢为本；办丧事虽讲礼仪，但必以哀痛为本；做官虽讲才识，但必以德行为本。所以立本不牢的，就不必讲究枝节的繁盛；身边的人不能亲近，就不必讲究招徕远方之民；亲戚不能使之归附，就不必讲究结纳外人；做一件事情有始无终，就不必谈起从事多种事业；举一件事物尚且弄不明白，就不必追求广见博闻。</p></blockquote></li><li><p>是故先王之治天下也，必察迩来远，君子察迩而迩修者也。见不修行，见毁，而反之身者也，此以怨省而行修矣。谮慝之言，无入之耳，批捍之声，无出之口，杀伤人之孩，无存之心，虽有诋讦之民，无所依矣。</p><blockquote><p>所以先王治理天下，必定要明察左右而招徕远人。君子能明察左右，左右之人也就能修养自己的品行了。君子不能修养自己的品行而受人诋毁，那就应当自我反省，因而怨少而品德日修。谗害诽谤之言不入于耳，攻击他人之语不出于口，伤害人的念头不存于心，这样，即使遇有好诋毁、攻击的人，也就无从施展了。</p></blockquote></li><li><p>故君子力事日强，愿欲日逾，设壮日盛。君子之道也，贫则见廉，富则见义，生则见爱，死则见哀。四行者不可虚假，反之身者也。藏于心者，无以竭爱。动于身者，无以竭恭。出于口者，无以竭驯。畅之四支，接之肌肤，华发隳颠，而犹弗舍者，其唯圣人乎！</p><blockquote><p>所以君子本身的力量一天比一天加强，志向一无比一天远大，庄敬的品行一天比一天完善。君子之道（应包括如下方面）：贫穷时表现出廉洁，富足时表现出恩义，对生者表示出慈爱，对死者表示出哀痛。这四种品行不是可以装出来的，而是必须自身具备的。凡是存在于内心的，是无穷的慈爱；举止于身体的，是无比的谦恭；谈说于嘴上的，是无比的雅驯。（让上述四种品行）畅达于四肢和肌肤，直到白发秃顶之时仍不肯舍弃，大概只有圣人吧！</p></blockquote></li><li><p>志不强者智不达，言不信者行不果。据财不能以分人者，不足与友。守道不笃，偏物不博，辩是非不察者，不足与游。本不固者末必几，雄而不修者，其后必惰，原浊者流不清，行不信者名必秏。名不徒生而誉不自长，功成名遂，名誉不可虚假，反之身者也。务言而缓行，虽辩必不听。多力而伐功，虽劳必不图。慧者心辩而不繁说，多力而不伐功，此以名誉扬天下。言无务为多而务为智，无务为文而务为察。故彼智无察，在身而情，反其路者也。善无主于心者不留，行莫辩于身者不立。名不可简而成也，誉不可巧而立也，君子以身戴行者也。思利寻焉，忘名忽焉，可以为士于天下者，未尝有也。</p><blockquote><p>意志不坚强的，智慧一定不高；说话不讲信用的，行动一定不果敢；拥有财富而不肯分给人的，不值得和他交友；守道不坚定，阅历事物不广博，辨别是非不清楚的，不值得和他交游。根本不牢的，枝节必危。光勇敢而不注重品行修养的，后必懒惰。源头浊的流不清，行为无信的人名声必受损害，声誉不会无故产生和自己增长。功成了必然名就，名誉不可虚假，必须反求诸己。专说而行动迟缓，虽然会说，但没人听信。出力多而自夸功劳，虽劳苦而不可取。聪明人心里明白而不多说，努力作事而不夸说自己的功劳，因此名誉扬于天下。说话不图繁多而讲究富有智慧，不图文采而讲究明白。所以既无智慧又不能审察，加上自身又懒惰，则必背离正道而行了。善不从本心生出就不能保留，行不由本身审辨就不能树立，名望不会由茍简而成，声誉不会因诈伪而立，君子是言行合一的。以图利为重，忽视立名，（这样）而可以成为天下贤士的人，还不曾有过。</p></blockquote></li></ul><p>@<a href="https://ctext.org/mozi/self-cultivation/zhs">https://ctext.org/mozi/self-cultivation/zhs</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;墨子·修身&quot;&gt;&lt;a href=&quot;#墨子·修身&quot; class=&quot;headerlink&quot; title=&quot;墨子·修身&quot;&gt;&lt;/a&gt;墨子·修身&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;君子战虽有陈，而勇为本焉。丧虽有礼，而哀为本焉。士虽有学，而行为本焉。是故置本不安者，无务丰末。近</summary>
      
    
    
    
    
    <category term="zhao" scheme="https://sun-moon-star-star.github.io/tags/zhao/"/>
    
  </entry>
  
</feed>
